{
  "contractName": "NFT",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "NFTRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "registerNFT",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addNFTMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"NFTRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addNFTMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"registerNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addNFTMetadata(uint256,string)\":{\"details\":\"Public function to add metadata to a NFT\",\"params\":{\"_tokenId\":\"represents a specific NFT\",\"_uri\":\"text which describes the characteristics of a given NFT\"},\"return\":\"whether the NFT metadata was added to the repository\"},\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token IDThe zero address indicates there is no approved address.There can only be one approved address per token at a given time.Can only be called by the token owner or an approved operator.\",\"params\":{\"_to\":\"address to be approved for the given token ID\",\"_tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"_owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"constructor\":{\"details\":\"Created a NFTRepository with a name and symbol\",\"params\":{\"_name\":\"string represents the name of the repository\",\"_symbol\":\"string represents the symbol of the repository\"}},\"exists(uint256)\":{\"details\":\"Returns whether the specified token exists\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the existance of\"},\"return\":\"whether the token exists\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for a the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"_operator\":\"operator address which you want to query the approval of\",\"_owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"owner address currently marked as the owner of the given token ID\"},\"registerNFT(string)\":{\"details\":\"Public function to register a new NFTCall the ERC721Token minter\",\"params\":{\"_uri\":\"string containing metadata/uri\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operatorAn operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"_approved\":\"representing the status of the approval to be set\",\"_to\":\"operator address to set the approval\"}},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contractReverts if the index is greater or equal to the total number of tokens\",\"params\":{\"_index\":\"uint256 representing the index to be accessed of the tokens list\"},\"return\":\"uint256 token ID at the given index of the tokens list\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner\",\"params\":{\"_index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"_owner\":\"address owning the tokens list to be accessed\"},\"return\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token IDThrows if the token ID does not exist. May return an empty string.\",\"params\":{\"_tokenId\":\"uint256 ID of the token to query\"}},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract\",\"return\":\"uint256 representing the total amount of tokens\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another addressUsage of this method is discouraged, use `safeTransferFrom` whenever possibleRequires the msg sender to be the owner, approved, or operator\",\"params\":{\"_from\":\"current owner of the token\",\"_to\":\"address to receive the ownership of the given token ID\",\"_tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"Repository of ERC721 NFTs This contract contains the list of nfts registered by users. This contract is used to mint and add tokens (NFT)  to the repository.\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/AddressUtils.sol\":{\"keccak256\":\"0xd5ebc2b4c16066152e923aae6740ba272d3a1069c00bab1cbdcd4435c8219717\",\"urls\":[\"bzz-raw://16e069f0272ec2e114fce37d3089010646a7e9e9058d7a1bdeaa8b7f9c5a8e3b\",\"dweb:/ipfs/QmUeHaNeWqMcrusqGqj8Ub6UVLGi1tBoFYbLokvEDiQQkw\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721.sol\":{\"keccak256\":\"0xcb8502c4433481316732e8c1046d6243b7f068b621f0c6ddcc4a01fbb523438a\",\"urls\":[\"bzz-raw://1f5101cf2e771a0ed1aee94865f30edbd55b76e50c02c9519b7f81199f8c8261\",\"dweb:/ipfs/QmWx8nGDZwyM9biqAE2pDPr5swx1kqFbUhCeZxWCQah3fM\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721Basic.sol\":{\"keccak256\":\"0x1067817f45307fb009d470c280dafc82c6fea3e8de196729beb9af0102917b60\",\"urls\":[\"bzz-raw://a0ec8b8e97120d2c8ea742e993fd776a47b8b43a8911c36b4af7e6d99a6447e0\",\"dweb:/ipfs/QmWvm4ryzSMP1YxCZnHUyViw491BWfkpkP3qGarq99wtuM\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721BasicToken.sol\":{\"keccak256\":\"0xa5a0e117264fdddc5006986d8eba63c395cc77316a5fd675e058bb7f783df893\",\"urls\":[\"bzz-raw://7f71a0105fd97cf3aa1f32f710a77f494ee538ec26ba7a495be850a32424fd47\",\"dweb:/ipfs/QmZNo4s7DA5dw8aTPgUWuYdKPyQMVoRPnHj1tR3WLjxCEE\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721Receiver.sol\":{\"keccak256\":\"0x1d3566daf0efe00c6332a0c04b580d82f37e96719367be0a71ff510389b2195e\",\"urls\":[\"bzz-raw://1beb596e7bdae35ac6559979b851b222af6c0c41b90b82345f1d706afcfb08aa\",\"dweb:/ipfs/QmZq8E6WgGdebF5VWrA5GdV7yMe9bCm4rYpZpYRtMZfbw6\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721Token.sol\":{\"keccak256\":\"0x0d8a3cbb87427fff587df0b64015bd47f5f77816fec83d642085798323fd4b04\",\"urls\":[\"bzz-raw://a981495eead948d2abe5e2e14f7799505430ba852e953312a650ee2c56e6e8f3\",\"dweb:/ipfs/QmetzjHGLrUn2vpnVx5fTri6wstzq8oKSdW2wZiA8XQicd\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/NFT.sol\":{\"keccak256\":\"0x4229ab2253ce37d692cfd23da0a99d3908c3a125d7fa88ab18f1e38d7d0a2c6a\",\"urls\":[\"bzz-raw://7d1a47750036892973bdff29bb94fab15eec81e18b729a54775248a3da488a42\",\"dweb:/ipfs/QmYwDs3gnSZn6J9Ha9kDTGsdoNsDD6W3bL1HE9vyriaTt7\"]},\"/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/SafeMath.sol\":{\"keccak256\":\"0x779d7f2cd654958a2325f6d98eda84d16fc8495bd71271ea77cffeef1f30e496\",\"urls\":[\"bzz-raw://885f01c105096561b689e78f98b277c2d67621180fa5ad3bdff92a3c0dafd8b4\",\"dweb:/ipfs/QmcfsxVZ7v9RDxKSDKhbJ27EusqXYg94C6rnRvV94Uqqsq\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620022bf380380620022bf833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b5060405250505081818160049080519060200190620001cf929190620001fb565b508060059080519060200190620001e8929190620001fb565b5050506000600b819055505050620002aa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023e57805160ff19168380011785556200026f565b828001600101855582156200026f579182015b828111156200026e57825182559160200191906001019062000251565b5b5090506200027e919062000282565b5090565b620002a791905b80821115620002a357600081600090555060010162000289565b5090565b90565b61200580620002ba6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80634f6ccce7116100ad578063b88d4fde11610071578063b88d4fde146106bf578063c87b56dd146107c4578063d082e3811461086b578063e985e9c514610889578063f57698b61461090557610121565b80634f6ccce7146104e45780636352211e1461052657806370a082311461059457806395d89b41146105ec578063a22cb4651461066f57610121565b806318160ddd116100f457806318160ddd1461034257806323b872dd146103605780632f745c59146103ce57806342842e0e146104305780634f558e791461049e57610121565b806306fdde0314610126578063081812fc146101a9578063095ea7b3146102175780630d3986a014610265575b600080fd5b61012e6109c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016e578082015181840152602081019050610153565b50505050905090810190601f16801561019b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d5600480360360208110156101bf57600080fd5b8101908080359060200190929190505050610a62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a9f565b005b6103286004803603604081101561027b57600080fd5b8101908080359060200190929190803590602001906401000000008111156102a257600080fd5b8201836020820111156102b457600080fd5b803590602001918460018302840111640100000000831117156102d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c61565b604051808215151515815260200191505060405180910390f35b61034a610c77565b6040518082815260200191505060405180910390f35b6103cc6004803603606081101561037657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c84565b005b61041a600480360360408110156103e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d95565b6040518082815260200191505060405180910390f35b61049c6004803603606081101561044657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e08565b005b6104ca600480360360208110156104b457600080fd5b8101908080359060200190929190505050610e3d565b604051808215151515815260200191505060405180910390f35b610510600480360360208110156104fa57600080fd5b8101908080359060200190929190505050610eae565b6040518082815260200191505060405180910390f35b6105526004803603602081101561053c57600080fd5b8101908080359060200190929190505050610ee2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105d6600480360360208110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5d565b6040518082815260200191505060405180910390f35b6105f4610fdf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610634578082015181840152602081019050610619565b50505050905090810190601f1680156106615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106bd6004803603604081101561068557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611081565b005b6107c2600480360360808110156106d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561073c57600080fd5b82018360208201111561074e57600080fd5b8035906020019184600183028401116401000000008311171561077057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506111bb565b005b6107f0600480360360208110156107da57600080fd5b81019080803590602001909291905050506111f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610830578082015181840152602081019050610815565b50505050905090810190601f16801561085d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108736112bd565b6040518082815260200191505060405180910390f35b6108eb6004803603604081101561089f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c3565b604051808215151515815260200191505060405180910390f35b6109be6004803603602081101561091b57600080fd5b810190808035906020019064010000000081111561093857600080fd5b82018360208201111561094a57600080fd5b8035906020019184600183028401116401000000008311171561096c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611357565b005b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a585780601f10610a2d57610100808354040283529160200191610a58565b820191906000526020600020905b815481529060010190602001808311610a3b57829003601f168201915b5050505050905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610aaa82610ee2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b255750610b2481336112c3565b5b610b2e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16610b4f83610a62565b73ffffffffffffffffffffffffffffffffffffffff16141580610b9f5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15610c5c57826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6000610c6d838361145b565b6001905092915050565b6000600880549050905090565b80610c8f3382611499565b610c9857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610cd257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d0c57600080fd5b610d16848361152e565b610d208483611693565b610d2a83836118a6565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000610da083610f5d565b8210610dab57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610df557fe5b9060005260206000200154905092915050565b80610e133382611499565b610e1c57600080fd5b610e37848484604051806020016040528060008152506111bb565b50505050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000610eb8610c77565b8210610ec357600080fd5b60088281548110610ed057fe5b90600052602060002001549050919050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f5457600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f9857600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110775780601f1061104c57610100808354040283529160200191611077565b820191906000526020600020905b81548152906001019060200180831161105a57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110ba57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b816111c63382611499565b6111cf57600080fd5b6111da858585610c84565b6111e68585858561197d565b6111ef57600080fd5b5050505050565b606061120182610e3d565b61120a57600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b50505050509050919050565b600b5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b5490506113683382611b32565b6113728183610c61565b506001600b5401600b819055507f861b51583da14819944b869387e5671de5253a6408a7c9b31ab10e934b8e632f338284604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561141b578082015181840152602081019050611400565b50505050905090810190601f1680156114485780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b61146482610e3d565b61146d57600080fd5b80600a60008481526020019081526020016000209080519060200190611494929190611eff565b505050565b6000806114a583610ee2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061151457508373ffffffffffffffffffffffffffffffffffffffff166114fc84610a62565b73ffffffffffffffffffffffffffffffffffffffff16145b80611525575061152481856112c3565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661154e82610ee2565b73ffffffffffffffffffffffffffffffffffffffff161461156e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461168f5760006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b61169d8282611b89565b600060076000838152602001908152602001600020549050600061170d6001600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611cb590919063ffffffff16565b90506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061175b57fe5b9060005260206000200154905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106117b357fe5b90600052602060002001819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061180d57fe5b9060005260206000200181905550600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361186d9190611f7f565b50600060076000868152602001908152602001600020819055508260076000838152602001908152602001600020819055505050505050565b6118b08282611ccc565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806007600084815260200190815260200160002081905550505050565b600061199e8473ffffffffffffffffffffffffffffffffffffffff16611e22565b6119ab5760019050611b2a565b60008473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a53578082015181840152602081019050611a38565b50505050905090810190601f168015611a805780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611aa157600080fd5b505af1158015611ab5573d6000803e3d6000fd5b505050506040513d6020811015611acb57600080fd5b8101908080519060200190929190505050905063f0b9e5ba60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b611b3c8282611e35565b600880549050600960008381526020019081526020016000208190555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b8173ffffffffffffffffffffffffffffffffffffffff16611ba982610ee2565b73ffffffffffffffffffffffffffffffffffffffff1614611bc957600080fd5b611c1c6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082821115611cc157fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d3757600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ddb6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ee390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e6f57600080fd5b611e7982826118a6565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080828401905083811015611ef557fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f4057805160ff1916838001178555611f6e565b82800160010185558215611f6e579182015b82811115611f6d578251825591602001919060010190611f52565b5b509050611f7b9190611fab565b5090565b815481835581811115611fa657818360005260206000209182019101611fa59190611fab565b5b505050565b611fcd91905b80821115611fc9576000816000905550600101611fb1565b5090565b9056fea265627a7a7231582083fcaa17b8eaa96e167f788ae949c35efb1a5789fba38ad4ad6b43d63a622fe564736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80634f6ccce7116100ad578063b88d4fde11610071578063b88d4fde146106bf578063c87b56dd146107c4578063d082e3811461086b578063e985e9c514610889578063f57698b61461090557610121565b80634f6ccce7146104e45780636352211e1461052657806370a082311461059457806395d89b41146105ec578063a22cb4651461066f57610121565b806318160ddd116100f457806318160ddd1461034257806323b872dd146103605780632f745c59146103ce57806342842e0e146104305780634f558e791461049e57610121565b806306fdde0314610126578063081812fc146101a9578063095ea7b3146102175780630d3986a014610265575b600080fd5b61012e6109c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016e578082015181840152602081019050610153565b50505050905090810190601f16801561019b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d5600480360360208110156101bf57600080fd5b8101908080359060200190929190505050610a62565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a9f565b005b6103286004803603604081101561027b57600080fd5b8101908080359060200190929190803590602001906401000000008111156102a257600080fd5b8201836020820111156102b457600080fd5b803590602001918460018302840111640100000000831117156102d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c61565b604051808215151515815260200191505060405180910390f35b61034a610c77565b6040518082815260200191505060405180910390f35b6103cc6004803603606081101561037657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c84565b005b61041a600480360360408110156103e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d95565b6040518082815260200191505060405180910390f35b61049c6004803603606081101561044657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e08565b005b6104ca600480360360208110156104b457600080fd5b8101908080359060200190929190505050610e3d565b604051808215151515815260200191505060405180910390f35b610510600480360360208110156104fa57600080fd5b8101908080359060200190929190505050610eae565b6040518082815260200191505060405180910390f35b6105526004803603602081101561053c57600080fd5b8101908080359060200190929190505050610ee2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105d6600480360360208110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5d565b6040518082815260200191505060405180910390f35b6105f4610fdf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610634578082015181840152602081019050610619565b50505050905090810190601f1680156106615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106bd6004803603604081101561068557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611081565b005b6107c2600480360360808110156106d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561073c57600080fd5b82018360208201111561074e57600080fd5b8035906020019184600183028401116401000000008311171561077057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506111bb565b005b6107f0600480360360208110156107da57600080fd5b81019080803590602001909291905050506111f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610830578082015181840152602081019050610815565b50505050905090810190601f16801561085d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108736112bd565b6040518082815260200191505060405180910390f35b6108eb6004803603604081101561089f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c3565b604051808215151515815260200191505060405180910390f35b6109be6004803603602081101561091b57600080fd5b810190808035906020019064010000000081111561093857600080fd5b82018360208201111561094a57600080fd5b8035906020019184600183028401116401000000008311171561096c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611357565b005b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a585780601f10610a2d57610100808354040283529160200191610a58565b820191906000526020600020905b815481529060010190602001808311610a3b57829003601f168201915b5050505050905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610aaa82610ee2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b255750610b2481336112c3565b5b610b2e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16610b4f83610a62565b73ffffffffffffffffffffffffffffffffffffffff16141580610b9f5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15610c5c57826001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6000610c6d838361145b565b6001905092915050565b6000600880549050905090565b80610c8f3382611499565b610c9857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610cd257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d0c57600080fd5b610d16848361152e565b610d208483611693565b610d2a83836118a6565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000610da083610f5d565b8210610dab57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610df557fe5b9060005260206000200154905092915050565b80610e133382611499565b610e1c57600080fd5b610e37848484604051806020016040528060008152506111bb565b50505050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000610eb8610c77565b8210610ec357600080fd5b60088281548110610ed057fe5b90600052602060002001549050919050565b60008060008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f5457600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f9857600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110775780601f1061104c57610100808354040283529160200191611077565b820191906000526020600020905b81548152906001019060200180831161105a57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110ba57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b816111c63382611499565b6111cf57600080fd5b6111da858585610c84565b6111e68585858561197d565b6111ef57600080fd5b5050505050565b606061120182610e3d565b61120a57600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b50505050509050919050565b600b5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b5490506113683382611b32565b6113728183610c61565b506001600b5401600b819055507f861b51583da14819944b869387e5671de5253a6408a7c9b31ab10e934b8e632f338284604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561141b578082015181840152602081019050611400565b50505050905090810190601f1680156114485780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b61146482610e3d565b61146d57600080fd5b80600a60008481526020019081526020016000209080519060200190611494929190611eff565b505050565b6000806114a583610ee2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061151457508373ffffffffffffffffffffffffffffffffffffffff166114fc84610a62565b73ffffffffffffffffffffffffffffffffffffffff16145b80611525575061152481856112c3565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661154e82610ee2565b73ffffffffffffffffffffffffffffffffffffffff161461156e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461168f5760006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b61169d8282611b89565b600060076000838152602001908152602001600020549050600061170d6001600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611cb590919063ffffffff16565b90506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061175b57fe5b9060005260206000200154905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106117b357fe5b90600052602060002001819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061180d57fe5b9060005260206000200181905550600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361186d9190611f7f565b50600060076000868152602001908152602001600020819055508260076000838152602001908152602001600020819055505050505050565b6118b08282611ccc565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806007600084815260200190815260200160002081905550505050565b600061199e8473ffffffffffffffffffffffffffffffffffffffff16611e22565b6119ab5760019050611b2a565b60008473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a53578082015181840152602081019050611a38565b50505050905090810190601f168015611a805780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611aa157600080fd5b505af1158015611ab5573d6000803e3d6000fd5b505050506040513d6020811015611acb57600080fd5b8101908080519060200190929190505050905063f0b9e5ba60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b611b3c8282611e35565b600880549050600960008381526020019081526020016000208190555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b8173ffffffffffffffffffffffffffffffffffffffff16611ba982610ee2565b73ffffffffffffffffffffffffffffffffffffffff1614611bc957600080fd5b611c1c6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cb590919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082821115611cc157fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d3757600080fd5b8160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ddb6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ee390919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e6f57600080fd5b611e7982826118a6565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080828401905083811015611ef557fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f4057805160ff1916838001178555611f6e565b82800160010185558215611f6e579182015b82811115611f6d578251825591602001919060010190611f52565b5b509050611f7b9190611fab565b5090565b815481835581811115611fa657818360005260206000209182019101611fa59190611fab565b5b505050565b611fcd91905b80821115611fc9576000816000905550600101611fb1565b5090565b9056fea265627a7a7231582083fcaa17b8eaa96e167f788ae949c35efb1a5789fba38ad4ad6b43d63a622fe564736f6c63430005110032",
  "sourceMap": "251:1532:8:-;;;538:131;8:9:-1;5:2;;;30:1;27;20:12;5:2;538:131:8;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;538:131:8;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;538:131:8;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;538:131:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;538:131:8;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;538:131:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;613:5;620:7;1188:5:5;1180;:13;;;;;;;;;;;;:::i;:::-;;1210:7;1200;:17;;;;;;;;;;;;:::i;:::-;;1110:113;;660:1:8;645:12;:16;;;;538:131;;251:1532;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "251:1532:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;251:1532:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1320:77:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1320:77:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3672:113:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3672:113:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3072:364;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3072:364:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1380:151:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1380:151:8;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1380:151:8;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1380:151:8;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1380:151:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1380:151:8;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2607:89:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5175:325:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5175:325:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2282:180:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2282:180:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6120:189:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6120:189:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2506:143;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2506:143:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3028::5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3028:143:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2157:168:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2157:168:3;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1796:145;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1796:145:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1498:81:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1498:81:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4073:209:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4073:209:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6999:275;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6999:275:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6999:275:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6999:275:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6999:275:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6999:275:3;;;;;;;;;;;;;;;:::i;:::-;;1775:143:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1775:143:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1775:143:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;292:27:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4599:144:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4599:144:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;838:272:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;838:272:8;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;838:272:8;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;838:272:8;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;838:272:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;838:272:8;;;;;;;;;;;;;;;:::i;:::-;;1320:77:5;1357:13;1386:5;1379:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1320:77;:::o;3672:113:3:-;3732:7;3755:14;:24;3770:8;3755:24;;;;;;;;;;;;;;;;;;;;;3748:31;;3672:113;;;:::o;3072:364::-;3134:13;3150:17;3158:8;3150:7;:17::i;:::-;3134:33;;3189:5;3182:12;;:3;:12;;;;3174:21;;;;;;3224:5;3210:19;;:10;:19;;;:58;;;;3233:35;3250:5;3257:10;3233:16;:35::i;:::-;3210:58;3202:67;;;;;;3315:1;3282:35;;:21;3294:8;3282:11;:21::i;:::-;:35;;;;:56;;;;3336:1;3321:17;;:3;:17;;;;3282:56;3278:153;;;3376:3;3349:14;:24;3364:8;3349:24;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;3409:3;3393:30;;3402:5;3393:30;;;3414:8;3393:30;;;;;;;;;;;;;;;;;;3278:153;3072:364;;;:::o;1380:151:8:-;1457:4;1473:28;1486:8;1496:4;1473:12;:28::i;:::-;1519:4;1512:11;;1380:151;;;;:::o;2607:89:5:-;2651:7;2674:9;:16;;;;2667:23;;2607:89;:::o;5175:325:3:-;5262:8;1547:39;1565:10;1577:8;1547:17;:39::i;:::-;1539:48;;;;;;5304:1;5287:19;;:5;:19;;;;5279:28;;;;;;5337:1;5322:17;;:3;:17;;;;5314:26;;;;;;5349:30;5363:5;5370:8;5349:13;:30::i;:::-;5386:32;5402:5;5409:8;5386:15;:32::i;:::-;5425:25;5436:3;5441:8;5425:10;:25::i;:::-;5480:3;5464:30;;5473:5;5464:30;;;5485:8;5464:30;;;;;;;;;;;;;;;;;;5175:325;;;;:::o;2282:180:5:-;2364:7;2397:17;2407:6;2397:9;:17::i;:::-;2388:6;:26;2380:35;;;;;;2429:11;:19;2441:6;2429:19;;;;;;;;;;;;;;;2449:6;2429:27;;;;;;;;;;;;;;;;2422:34;;2282:180;;;;:::o;6120:189:3:-;6241:8;1547:39;1565:10;1577:8;1547:17;:39::i;:::-;1539:48;;;;;;6261:42;6278:5;6285:3;6290:8;6261:42;;;;;;;;;;;;:16;:42::i;:::-;6120:189;;;;:::o;2506:143::-;2561:4;2574:13;2590:10;:20;2601:8;2590:20;;;;;;;;;;;;;;;;;;;;;2574:36;;2641:1;2624:19;;:5;:19;;;;2617:26;;;2506:143;;;:::o;3028::5:-;3087:7;3120:13;:11;:13::i;:::-;3111:6;:22;3103:31;;;;;;3148:9;3158:6;3148:17;;;;;;;;;;;;;;;;3141:24;;3028:143;;;:::o;2157:168:3:-;2213:7;2229:13;2245:10;:20;2256:8;2245:20;;;;;;;;;;;;;;;;;;;;;2229:36;;2297:1;2280:19;;:5;:19;;;;2272:28;;;;;;2314:5;2307:12;;;2157:168;;;:::o;1796:145::-;1852:7;1894:1;1876:20;;:6;:20;;;;1868:29;;;;;;1911:16;:24;1928:6;1911:24;;;;;;;;;;;;;;;;1904:31;;1796:145;;;:::o;1498:81:5:-;1537:13;1566:7;1559:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1498:81;:::o;4073:209:3:-;4158:10;4151:17;;:3;:17;;;;4143:26;;;;;;4213:9;4176:17;:29;4194:10;4176:29;;;;;;;;;;;;;;;:34;4206:3;4176:34;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;4261:3;4234:42;;4249:10;4234:42;;;4266:9;4234:42;;;;;;;;;;;;;;;;;;;;;;4073:209;;:::o;6999:275::-;7145:8;1547:39;1565:10;1577:8;1547:17;:39::i;:::-;1539:48;;;;;;7165:34;7178:5;7185:3;7190:8;7165:12;:34::i;:::-;7214:53;7239:5;7246:3;7251:8;7261:5;7214:24;:53::i;:::-;7206:62;;;;;;6999:275;;;;;:::o;1775:143:5:-;1832:13;1862:16;1869:8;1862:6;:16::i;:::-;1854:25;;;;;;1893:9;:19;1903:8;1893:19;;;;;;;;;;;1886:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1775:143;;;:::o;292:27:8:-;;;;:::o;4599:144:3:-;4681:4;4701:17;:25;4719:6;4701:25;;;;;;;;;;;;;;;:36;4727:9;4701:36;;;;;;;;;;;;;;;;;;;;;;;;;4694:43;;4599:144;;;;:::o;838:272:8:-;897:15;915:12;;897:30;;938:26;944:10;956:7;938:5;:26::i;:::-;975:29;990:7;999:4;975:14;:29::i;:::-;;1045:1;1030:12;;:16;1015:12;:31;;;;1062:40;1076:10;1088:7;1097:4;1062:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1062:40:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;838:272;;:::o;3404:140:5:-;3488:16;3495:8;3488:6;:16::i;:::-;3480:25;;;;;;3534:4;3512:9;:19;3522:8;3512:19;;;;;;;;;;;:26;;;;;;;;;;;;:::i;:::-;;3404:140;;:::o;7630:243:3:-;7716:4;7729:13;7745:17;7753:8;7745:7;:17::i;:::-;7729:33;;7788:5;7776:17;;:8;:17;;;:54;;;;7822:8;7797:33;;:21;7809:8;7797:11;:21::i;:::-;:33;;;7776:54;:91;;;;7834:33;7851:5;7858:8;7834:16;:33::i;:::-;7776:91;7769:98;;;7630:243;;;;:::o;8959:271::-;9061:6;9040:27;;:17;9048:8;9040:7;:17::i;:::-;:27;;;9032:36;;;;;;9115:1;9079:38;;:14;:24;9094:8;9079:24;;;;;;;;;;;;;;;;;;;;;:38;;;9075:150;;9163:1;9128:14;:24;9143:8;9128:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;9204:1;9179:38;;9188:6;9179:38;;;9208:8;9179:38;;;;;;;;;;;;;;;;;;9075:150;8959:271;;:::o;4323:872:5:-;4397:38;4419:5;4426:8;4397:21;:38::i;:::-;4444:18;4465:16;:26;4482:8;4465:26;;;;;;;;;;;;4444:47;;4498:22;4523:32;4553:1;4523:11;:18;4535:5;4523:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;4498:57;;4562:17;4582:11;:18;4594:5;4582:18;;;;;;;;;;;;;;;4601:14;4582:34;;;;;;;;;;;;;;;;4562:54;;4658:9;4625:11;:18;4637:5;4625:18;;;;;;;;;;;;;;;4644:10;4625:30;;;;;;;;;;;;;;;:42;;;;4711:1;4674:11;:18;4686:5;4674:18;;;;;;;;;;;;;;;4693:14;4674:34;;;;;;;;;;;;;;;:38;;;;5078:11;:18;5090:5;5078:18;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:::i;:::-;;5141:1;5112:16;:26;5129:8;5112:26;;;;;;;;;;;:30;;;;5179:10;5149:16;:27;5166:9;5149:27;;;;;;;;;;;:40;;;;4323:872;;;;;:::o;3810:231::-;3877:31;3894:3;3899:8;3877:16;:31::i;:::-;3915:14;3932:11;:16;3944:3;3932:16;;;;;;;;;;;;;;;:23;;;;3915:40;;3962:11;:16;3974:3;3962:16;;;;;;;;;;;;;;;3984:8;3962:31;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;3962:31:5;;;;;;;;;;;;;;;;;;;;;;4029:6;4000:16;:26;4017:8;4000:26;;;;;;;;;;;:35;;;;3810:231;;;:::o;10718:349:3:-;10871:4;10892:16;:3;:14;;;:16::i;:::-;10887:51;;10926:4;10919:11;;;;10887:51;10944:13;10975:3;10960:36;;;10997:5;11004:8;11014:5;10960:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10960:60:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10960:60:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10960:60:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10960:60:3;;;;;;;;;;;;;;;;10944:76;;609:10;11045:15;;11035:25;;;:6;:25;;;;11027:34;;;10718:349;;;;;;;:::o;5464:177:5:-;5526:26;5538:3;5543:8;5526:11;:26::i;:::-;5588:9;:16;;;;5561:14;:24;5576:8;5561:24;;;;;;;;;;;:43;;;;5611:9;5626:8;5611:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5611:24:5;;;;;;;;;;;;;;;;;;;;;;5464:177;;:::o;9986:218:3:-;10089:5;10068:26;;:17;10076:8;10068:7;:17::i;:::-;:26;;;10060:35;;;;;;10128:30;10156:1;10128:16;:23;10145:5;10128:23;;;;;;;;;;;;;;;;:27;;:30;;;;:::i;:::-;10102:16;:23;10119:5;10102:23;;;;;;;;;;;;;;;:56;;;;10196:1;10165:10;:20;10176:8;10165:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;9986:218;;:::o;876:113:9:-;934:7;962:1;957;:6;;950:14;;;;982:1;978;:5;971:12;;876:113;;;;:::o;9496:208:3:-;9603:1;9571:34;;:10;:20;9582:8;9571:20;;;;;;;;;;;;;;;;;;;;;:34;;;9563:43;;;;;;9636:3;9613:10;:20;9624:8;9613:20;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;9670:28;9696:1;9670:16;:21;9687:3;9670:21;;;;;;;;;;;;;;;;:25;;:28;;;;:::i;:::-;9646:16;:21;9663:3;9646:21;;;;;;;;;;;;;;;:52;;;;9496:208;;:::o;453:578:0:-;510:4;523:12;945:4;933:17;925:25;;1024:1;1017:4;:8;1010:15;;;453:578;;;:::o;8130:173:3:-;8215:1;8200:17;;:3;:17;;;;8192:26;;;;;;8225:25;8236:3;8241:8;8225:10;:25::i;:::-;8283:3;8262:35;;8279:1;8262:35;;;8288:8;8262:35;;;;;;;;;;;;;;;;;;8130:173;;:::o;1056:133:9:-;1114:7;1130:9;1146:1;1142;:5;1130:17;;1166:1;1161;:6;;1154:14;;;;1182:1;1175:8;;;1056:133;;;;:::o;251:1532:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.16;\r\nimport \"./ERC721Token.sol\";\r\n\r\n/**\r\n * @title Repository of ERC721 NFTs\r\n * This contract contains the list of nfts registered by users.\r\n * This contract is used to mint and add tokens (NFT) \r\n * to the repository.\r\n */\r\n \r\ncontract NFT is ERC721Token {\r\n    \r\n    uint256 public tokenCounter;\r\n\r\n    /**\r\n    * @dev Created a NFTRepository with a name and symbol\r\n    * @param _name string represents the name of the repository\r\n    * @param _symbol string represents the symbol of the repository\r\n    */\r\n    constructor(string memory _name, string memory _symbol) public ERC721Token(_name, _symbol) {\r\n             tokenCounter = 0;\r\n    }\r\n    \r\n    /**\r\n    * @dev Public function to register a new NFT\r\n    * @dev Call the ERC721Token minter\r\n    * @param _uri string containing metadata/uri\r\n    */\r\n    function registerNFT(string memory _uri) public {\r\n        uint256 tokenId = tokenCounter;\r\n        _mint(msg.sender, tokenId);\r\n        addNFTMetadata(tokenId, _uri);\r\n        tokenCounter = tokenCounter + 1;\r\n        emit NFTRegistered(msg.sender, tokenId, _uri);\r\n    }\r\n\r\n    /**\r\n    * @dev Public function to add metadata to a NFT\r\n    * @param _tokenId represents a specific NFT\r\n    * @param _uri text which describes the characteristics of a given NFT\r\n    * @return whether the NFT metadata was added to the repository\r\n    */\r\n    function addNFTMetadata(uint256 _tokenId, string memory _uri) public returns(bool){\r\n        _setTokenURI(_tokenId, _uri);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Event is triggered if NFT/token is registered\r\n    * @param _by address of the registrar\r\n    * @param _tokenId uint256 represents a specific NFT\r\n    */\r\n    event NFTRegistered(address _by, uint256 _tokenId, string _uri);\r\n\r\n}",
  "sourcePath": "C:\\Users\\yashr\\Documents\\Important\\Projects\\FootPrints\\src\\contracts\\NFT.sol",
  "ast": {
    "absolutePath": "/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/NFT.sol",
    "exportedSymbols": {
      "NFT": [
        1457
      ]
    },
    "id": 1458,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1376,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "absolutePath": "/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721Token.sol",
        "file": "./ERC721Token.sol",
        "id": 1377,
        "nodeType": "ImportDirective",
        "scope": 1458,
        "sourceUnit": 1150,
        "src": "26:27:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1378,
              "name": "ERC721Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1149,
              "src": "267:11:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Token_$1149",
                "typeString": "contract ERC721Token"
              }
            },
            "id": 1379,
            "nodeType": "InheritanceSpecifier",
            "src": "267:11:8"
          }
        ],
        "contractDependencies": [
          45,
          65,
          72,
          179,
          762,
          1149
        ],
        "contractKind": "contract",
        "documentation": "@title Repository of ERC721 NFTs\nThis contract contains the list of nfts registered by users.\nThis contract is used to mint and add tokens (NFT) \nto the repository.",
        "fullyImplemented": true,
        "id": 1457,
        "linearizedBaseContracts": [
          1457,
          1149,
          762,
          72,
          65,
          45,
          179
        ],
        "name": "NFT",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1381,
            "name": "tokenCounter",
            "nodeType": "VariableDeclaration",
            "scope": 1457,
            "src": "292:27:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1380,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "292:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1396,
              "nodeType": "Block",
              "src": "629:40:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1392,
                      "name": "tokenCounter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1381,
                      "src": "645:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1393,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "660:1:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "645:16:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1395,
                  "nodeType": "ExpressionStatement",
                  "src": "645:16:8"
                }
              ]
            },
            "documentation": "@dev Created a NFTRepository with a name and symbol\n@param _name string represents the name of the repository\n@param _symbol string represents the symbol of the repository",
            "id": 1397,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1388,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1383,
                    "src": "613:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 1389,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1385,
                    "src": "620:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 1390,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1387,
                  "name": "ERC721Token",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1149,
                  "src": "601:11:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Token_$1149_$",
                    "typeString": "type(contract ERC721Token)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "601:27:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1383,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1397,
                  "src": "550:19:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1382,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "550:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1385,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1397,
                  "src": "571:21:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1384,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "571:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "549:44:8"
            },
            "returnParameters": {
              "id": 1391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "629:0:8"
            },
            "scope": 1457,
            "src": "538:131:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1430,
              "nodeType": "Block",
              "src": "886:224:8",
              "statements": [
                {
                  "assignments": [
                    1403
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1403,
                      "name": "tokenId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1430,
                      "src": "897:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1402,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "897:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1405,
                  "initialValue": {
                    "argumentTypes": null,
                    "id": 1404,
                    "name": "tokenCounter",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1381,
                    "src": "915:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "897:30:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1407,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1566,
                          "src": "944:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "944:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1409,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1403,
                        "src": "956:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1406,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1069
                      ],
                      "referencedDeclaration": 1069,
                      "src": "938:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1410,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "938:26:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1411,
                  "nodeType": "ExpressionStatement",
                  "src": "938:26:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1413,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1403,
                        "src": "990:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1414,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1399,
                        "src": "999:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1412,
                      "name": "addNFTMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1448,
                      "src": "975:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (uint256,string memory) returns (bool)"
                      }
                    },
                    "id": 1415,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "975:29:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1416,
                  "nodeType": "ExpressionStatement",
                  "src": "975:29:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1417,
                      "name": "tokenCounter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1381,
                      "src": "1015:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1420,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "argumentTypes": null,
                        "id": 1418,
                        "name": "tokenCounter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1381,
                        "src": "1030:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 1419,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1045:1:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "1030:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1015:31:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1422,
                  "nodeType": "ExpressionStatement",
                  "src": "1015:31:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1424,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1566,
                          "src": "1076:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1425,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1076:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1426,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1403,
                        "src": "1088:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1427,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1399,
                        "src": "1097:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1423,
                      "name": "NFTRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1456,
                      "src": "1062:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,string memory)"
                      }
                    },
                    "id": 1428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1062:40:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1429,
                  "nodeType": "EmitStatement",
                  "src": "1057:45:8"
                }
              ]
            },
            "documentation": "@dev Public function to register a new NFT\n@dev Call the ERC721Token minter\n@param _uri string containing metadata/uri",
            "id": 1431,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerNFT",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1400,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1399,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "859:18:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1398,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "859:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "858:20:8"
            },
            "returnParameters": {
              "id": 1401,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "886:0:8"
            },
            "scope": 1457,
            "src": "838:272:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1447,
              "nodeType": "Block",
              "src": "1462:69:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1441,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1433,
                        "src": "1486:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1442,
                        "name": "_uri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1435,
                        "src": "1496:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 1440,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 933,
                      "src": "1473:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 1443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1473:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1444,
                  "nodeType": "ExpressionStatement",
                  "src": "1473:28:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1445,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1519:4:8",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1439,
                  "id": 1446,
                  "nodeType": "Return",
                  "src": "1512:11:8"
                }
              ]
            },
            "documentation": "@dev Public function to add metadata to a NFT\n@param _tokenId represents a specific NFT\n@param _uri text which describes the characteristics of a given NFT\n@return whether the NFT metadata was added to the repository",
            "id": 1448,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addNFTMetadata",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1433,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1448,
                  "src": "1404:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1432,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1404:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1435,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 1448,
                  "src": "1422:18:8",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1434,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1422:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1403:38:8"
            },
            "returnParameters": {
              "id": 1439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1438,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1448,
                  "src": "1457:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1437,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1457:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1456:6:8"
            },
            "scope": 1457,
            "src": "1380:151:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": "@dev Event is triggered if NFT/token is registered\n@param _by address of the registrar\n@param _tokenId uint256 represents a specific NFT",
            "id": 1456,
            "name": "NFTRegistered",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1450,
                  "indexed": false,
                  "name": "_by",
                  "nodeType": "VariableDeclaration",
                  "scope": 1456,
                  "src": "1734:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1449,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1734:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1452,
                  "indexed": false,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1456,
                  "src": "1747:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1451,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1747:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1454,
                  "indexed": false,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 1456,
                  "src": "1765:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1453,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1765:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1733:44:8"
            },
            "src": "1714:64:8"
          }
        ],
        "scope": 1458,
        "src": "251:1532:8"
      }
    ],
    "src": "0:1783:8"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/NFT.sol",
      "exportedSymbols": {
        "NFT": [
          1457
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".16"
          ]
        },
        "id": 1376,
        "name": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "attributes": {
          "SourceUnit": 1150,
          "absolutePath": "/C/Users/yashr/Documents/Important/Projects/FootPrints/src/contracts/ERC721Token.sol",
          "file": "./ERC721Token.sol",
          "scope": 1458,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1377,
        "name": "ImportDirective",
        "src": "26:27:8"
      },
      {
        "attributes": {
          "contractDependencies": [
            45,
            65,
            72,
            179,
            762,
            1149
          ],
          "contractKind": "contract",
          "documentation": "@title Repository of ERC721 NFTs\nThis contract contains the list of nfts registered by users.\nThis contract is used to mint and add tokens (NFT) \nto the repository.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            1457,
            1149,
            762,
            72,
            65,
            45,
            179
          ],
          "name": "NFT",
          "scope": 1458
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "ERC721Token",
                  "referencedDeclaration": 1149,
                  "type": "contract ERC721Token"
                },
                "id": 1378,
                "name": "UserDefinedTypeName",
                "src": "267:11:8"
              }
            ],
            "id": 1379,
            "name": "InheritanceSpecifier",
            "src": "267:11:8"
          },
          {
            "attributes": {
              "constant": false,
              "name": "tokenCounter",
              "scope": 1457,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "value": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 1380,
                "name": "ElementaryTypeName",
                "src": "292:7:8"
              }
            ],
            "id": 1381,
            "name": "VariableDeclaration",
            "src": "292:27:8"
          },
          {
            "attributes": {
              "documentation": "@dev Created a NFTRepository with a name and symbol\n@param _name string represents the name of the repository\n@param _symbol string represents the symbol of the repository",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 1457,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_name",
                      "scope": 1397,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 1382,
                        "name": "ElementaryTypeName",
                        "src": "550:6:8"
                      }
                    ],
                    "id": 1383,
                    "name": "VariableDeclaration",
                    "src": "550:19:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_symbol",
                      "scope": 1397,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 1384,
                        "name": "ElementaryTypeName",
                        "src": "571:6:8"
                      }
                    ],
                    "id": 1385,
                    "name": "VariableDeclaration",
                    "src": "571:21:8"
                  }
                ],
                "id": 1386,
                "name": "ParameterList",
                "src": "549:44:8"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1391,
                "name": "ParameterList",
                "src": "629:0:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1149,
                      "type": "type(contract ERC721Token)",
                      "value": "ERC721Token"
                    },
                    "id": 1387,
                    "name": "Identifier",
                    "src": "601:11:8"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1383,
                      "type": "string memory",
                      "value": "_name"
                    },
                    "id": 1388,
                    "name": "Identifier",
                    "src": "613:5:8"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1385,
                      "type": "string memory",
                      "value": "_symbol"
                    },
                    "id": 1389,
                    "name": "Identifier",
                    "src": "620:7:8"
                  }
                ],
                "id": 1390,
                "name": "ModifierInvocation",
                "src": "601:27:8"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1381,
                              "type": "uint256",
                              "value": "tokenCounter"
                            },
                            "id": 1392,
                            "name": "Identifier",
                            "src": "645:12:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 1393,
                            "name": "Literal",
                            "src": "660:1:8"
                          }
                        ],
                        "id": 1394,
                        "name": "Assignment",
                        "src": "645:16:8"
                      }
                    ],
                    "id": 1395,
                    "name": "ExpressionStatement",
                    "src": "645:16:8"
                  }
                ],
                "id": 1396,
                "name": "Block",
                "src": "629:40:8"
              }
            ],
            "id": 1397,
            "name": "FunctionDefinition",
            "src": "538:131:8"
          },
          {
            "attributes": {
              "documentation": "@dev Public function to register a new NFT\n@dev Call the ERC721Token minter\n@param _uri string containing metadata/uri",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "registerNFT",
              "scope": 1457,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_uri",
                      "scope": 1431,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 1398,
                        "name": "ElementaryTypeName",
                        "src": "859:6:8"
                      }
                    ],
                    "id": 1399,
                    "name": "VariableDeclaration",
                    "src": "859:18:8"
                  }
                ],
                "id": 1400,
                "name": "ParameterList",
                "src": "858:20:8"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1401,
                "name": "ParameterList",
                "src": "886:0:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "assignments": [
                        1403
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "tokenId",
                          "scope": 1430,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 1402,
                            "name": "ElementaryTypeName",
                            "src": "897:7:8"
                          }
                        ],
                        "id": 1403,
                        "name": "VariableDeclaration",
                        "src": "897:15:8"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "overloadedDeclarations": [
                            null
                          ],
                          "referencedDeclaration": 1381,
                          "type": "uint256",
                          "value": "tokenCounter"
                        },
                        "id": 1404,
                        "name": "Identifier",
                        "src": "915:12:8"
                      }
                    ],
                    "id": 1405,
                    "name": "VariableDeclarationStatement",
                    "src": "897:30:8"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                1069
                              ],
                              "referencedDeclaration": 1069,
                              "type": "function (address,uint256)",
                              "value": "_mint"
                            },
                            "id": 1406,
                            "name": "Identifier",
                            "src": "938:5:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "sender",
                              "referencedDeclaration": null,
                              "type": "address payable"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 1566,
                                  "type": "msg",
                                  "value": "msg"
                                },
                                "id": 1407,
                                "name": "Identifier",
                                "src": "944:3:8"
                              }
                            ],
                            "id": 1408,
                            "name": "MemberAccess",
                            "src": "944:10:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1403,
                              "type": "uint256",
                              "value": "tokenId"
                            },
                            "id": 1409,
                            "name": "Identifier",
                            "src": "956:7:8"
                          }
                        ],
                        "id": 1410,
                        "name": "FunctionCall",
                        "src": "938:26:8"
                      }
                    ],
                    "id": 1411,
                    "name": "ExpressionStatement",
                    "src": "938:26:8"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "bool",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1448,
                              "type": "function (uint256,string memory) returns (bool)",
                              "value": "addNFTMetadata"
                            },
                            "id": 1412,
                            "name": "Identifier",
                            "src": "975:14:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1403,
                              "type": "uint256",
                              "value": "tokenId"
                            },
                            "id": 1413,
                            "name": "Identifier",
                            "src": "990:7:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1399,
                              "type": "string memory",
                              "value": "_uri"
                            },
                            "id": 1414,
                            "name": "Identifier",
                            "src": "999:4:8"
                          }
                        ],
                        "id": 1415,
                        "name": "FunctionCall",
                        "src": "975:29:8"
                      }
                    ],
                    "id": 1416,
                    "name": "ExpressionStatement",
                    "src": "975:29:8"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1381,
                              "type": "uint256",
                              "value": "tokenCounter"
                            },
                            "id": 1417,
                            "name": "Identifier",
                            "src": "1015:12:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "+",
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 1381,
                                  "type": "uint256",
                                  "value": "tokenCounter"
                                },
                                "id": 1418,
                                "name": "Identifier",
                                "src": "1030:12:8"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "hexvalue": "31",
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "subdenomination": null,
                                  "token": "number",
                                  "type": "int_const 1",
                                  "value": "1"
                                },
                                "id": 1419,
                                "name": "Literal",
                                "src": "1045:1:8"
                              }
                            ],
                            "id": 1420,
                            "name": "BinaryOperation",
                            "src": "1030:16:8"
                          }
                        ],
                        "id": 1421,
                        "name": "Assignment",
                        "src": "1015:31:8"
                      }
                    ],
                    "id": 1422,
                    "name": "ExpressionStatement",
                    "src": "1015:31:8"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1456,
                              "type": "function (address,uint256,string memory)",
                              "value": "NFTRegistered"
                            },
                            "id": 1423,
                            "name": "Identifier",
                            "src": "1062:13:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "sender",
                              "referencedDeclaration": null,
                              "type": "address payable"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 1566,
                                  "type": "msg",
                                  "value": "msg"
                                },
                                "id": 1424,
                                "name": "Identifier",
                                "src": "1076:3:8"
                              }
                            ],
                            "id": 1425,
                            "name": "MemberAccess",
                            "src": "1076:10:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1403,
                              "type": "uint256",
                              "value": "tokenId"
                            },
                            "id": 1426,
                            "name": "Identifier",
                            "src": "1088:7:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1399,
                              "type": "string memory",
                              "value": "_uri"
                            },
                            "id": 1427,
                            "name": "Identifier",
                            "src": "1097:4:8"
                          }
                        ],
                        "id": 1428,
                        "name": "FunctionCall",
                        "src": "1062:40:8"
                      }
                    ],
                    "id": 1429,
                    "name": "EmitStatement",
                    "src": "1057:45:8"
                  }
                ],
                "id": 1430,
                "name": "Block",
                "src": "886:224:8"
              }
            ],
            "id": 1431,
            "name": "FunctionDefinition",
            "src": "838:272:8"
          },
          {
            "attributes": {
              "documentation": "@dev Public function to add metadata to a NFT\n@param _tokenId represents a specific NFT\n@param _uri text which describes the characteristics of a given NFT\n@return whether the NFT metadata was added to the repository",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "addNFTMetadata",
              "scope": 1457,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_tokenId",
                      "scope": 1448,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1432,
                        "name": "ElementaryTypeName",
                        "src": "1404:7:8"
                      }
                    ],
                    "id": 1433,
                    "name": "VariableDeclaration",
                    "src": "1404:16:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_uri",
                      "scope": 1448,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 1434,
                        "name": "ElementaryTypeName",
                        "src": "1422:6:8"
                      }
                    ],
                    "id": 1435,
                    "name": "VariableDeclaration",
                    "src": "1422:18:8"
                  }
                ],
                "id": 1436,
                "name": "ParameterList",
                "src": "1403:38:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 1448,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 1437,
                        "name": "ElementaryTypeName",
                        "src": "1457:4:8"
                      }
                    ],
                    "id": 1438,
                    "name": "VariableDeclaration",
                    "src": "1457:4:8"
                  }
                ],
                "id": 1439,
                "name": "ParameterList",
                "src": "1456:6:8"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 933,
                              "type": "function (uint256,string memory)",
                              "value": "_setTokenURI"
                            },
                            "id": 1440,
                            "name": "Identifier",
                            "src": "1473:12:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1433,
                              "type": "uint256",
                              "value": "_tokenId"
                            },
                            "id": 1441,
                            "name": "Identifier",
                            "src": "1486:8:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1435,
                              "type": "string memory",
                              "value": "_uri"
                            },
                            "id": 1442,
                            "name": "Identifier",
                            "src": "1496:4:8"
                          }
                        ],
                        "id": 1443,
                        "name": "FunctionCall",
                        "src": "1473:28:8"
                      }
                    ],
                    "id": 1444,
                    "name": "ExpressionStatement",
                    "src": "1473:28:8"
                  },
                  {
                    "attributes": {
                      "functionReturnParameters": 1439
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "hexvalue": "74727565",
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "subdenomination": null,
                          "token": "bool",
                          "type": "bool",
                          "value": "true"
                        },
                        "id": 1445,
                        "name": "Literal",
                        "src": "1519:4:8"
                      }
                    ],
                    "id": 1446,
                    "name": "Return",
                    "src": "1512:11:8"
                  }
                ],
                "id": 1447,
                "name": "Block",
                "src": "1462:69:8"
              }
            ],
            "id": 1448,
            "name": "FunctionDefinition",
            "src": "1380:151:8"
          },
          {
            "attributes": {
              "anonymous": false,
              "documentation": "@dev Event is triggered if NFT/token is registered\n@param _by address of the registrar\n@param _tokenId uint256 represents a specific NFT",
              "name": "NFTRegistered"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "indexed": false,
                      "name": "_by",
                      "scope": 1456,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 1449,
                        "name": "ElementaryTypeName",
                        "src": "1734:7:8"
                      }
                    ],
                    "id": 1450,
                    "name": "VariableDeclaration",
                    "src": "1734:11:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "indexed": false,
                      "name": "_tokenId",
                      "scope": 1456,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1451,
                        "name": "ElementaryTypeName",
                        "src": "1747:7:8"
                      }
                    ],
                    "id": 1452,
                    "name": "VariableDeclaration",
                    "src": "1747:16:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "indexed": false,
                      "name": "_uri",
                      "scope": 1456,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 1453,
                        "name": "ElementaryTypeName",
                        "src": "1765:6:8"
                      }
                    ],
                    "id": 1454,
                    "name": "VariableDeclaration",
                    "src": "1765:11:8"
                  }
                ],
                "id": 1455,
                "name": "ParameterList",
                "src": "1733:44:8"
              }
            ],
            "id": 1456,
            "name": "EventDefinition",
            "src": "1714:64:8"
          }
        ],
        "id": 1457,
        "name": "ContractDefinition",
        "src": "251:1532:8"
      }
    ],
    "id": 1458,
    "name": "SourceUnit",
    "src": "0:1783:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x50E087C4177DE03d65306FD41455d01a61d5D67C",
      "transactionHash": "0x9d5314d564953bb83c8bf2f7ca3e53c91145d7015b94ae362c8263c7eff2ef01"
    },
    "80001": {
      "events": {},
      "links": {},
      "address": "0x0B7380Fc6730CD30e43e839d3Eca746bF0491867",
      "transactionHash": "0x96e18321b3cc2d8e8a881a9b995a41a9ddf93cd9b4f71d5de28cfec062dc0c6a"
    }
  },
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-08-01T07:12:30.653Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "addNFTMetadata(uint256,string)": {
        "details": "Public function to add metadata to a NFT",
        "params": {
          "_tokenId": "represents a specific NFT",
          "_uri": "text which describes the characteristics of a given NFT"
        },
        "return": "whether the NFT metadata was added to the repository"
      },
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token IDThe zero address indicates there is no approved address.There can only be one approved address per token at a given time.Can only be called by the token owner or an approved operator.",
        "params": {
          "_to": "address to be approved for the given token ID",
          "_tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "_owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "constructor": {
        "details": "Created a NFTRepository with a name and symbol",
        "params": {
          "_name": "string represents the name of the repository",
          "_symbol": "string represents the symbol of the repository"
        }
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token exists",
        "params": {
          "_tokenId": "uint256 ID of the token to query the existance of"
        },
        "return": "whether the token exists"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set",
        "params": {
          "_tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for a the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "_operator": "operator address which you want to query the approval of",
          "_owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "_tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "registerNFT(string)": {
        "details": "Public function to register a new NFTCall the ERC721Token minter",
        "params": {
          "_uri": "string containing metadata/uri"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operatorAn operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "_approved": "representing the status of the approval to be set",
          "_to": "operator address to set the approval"
        }
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contractReverts if the index is greater or equal to the total number of tokens",
        "params": {
          "_index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "_index": "uint256 representing the index to be accessed of the requested tokens list",
          "_owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token IDThrows if the token ID does not exist. May return an empty string.",
        "params": {
          "_tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressUsage of this method is discouraged, use `safeTransferFrom` whenever possibleRequires the msg sender to be the owner, approved, or operator",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the given token ID",
          "_tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Repository of ERC721 NFTs This contract contains the list of nfts registered by users. This contract is used to mint and add tokens (NFT)  to the repository."
  },
  "userdoc": {
    "methods": {}
  }
}